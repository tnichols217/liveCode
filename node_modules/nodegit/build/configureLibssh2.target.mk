# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := configureLibssh2
### Rules for action "configure":
quiet_cmd_binding_gyp_configureLibssh2_target_configure = ACTION binding_gyp_configureLibssh2_target_configure $@
cmd_binding_gyp_configureLibssh2_target_configure = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; node utils/configureLibssh2.js

.: obj := $(abs_obj)
.: builddir := $(abs_builddir)
.: TOOLSET := $(TOOLSET)
.: $(srcdir)/. FORCE_DO_CMD
	$(call do_cmd,binding_gyp_configureLibssh2_target_configure)

all_deps += .
action_binding_gyp_configureLibssh2_target_configure_outputs := .


### Rules for final target.
# Build our special outputs first.
$(obj).target/configureLibssh2.node: | $(action_binding_gyp_configureLibssh2_target_configure_outputs)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_configureLibssh2_target_configure_outputs): | 

LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS :=

$(obj).target/configureLibssh2.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/configureLibssh2.node: LIBS := $(LIBS)
$(obj).target/configureLibssh2.node: TOOLSET := $(TOOLSET)
$(obj).target/configureLibssh2.node:  FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/configureLibssh2.node
# Add target alias
.PHONY: configureLibssh2
configureLibssh2: $(builddir)/configureLibssh2.node

# Copy this to the executable output path.
$(builddir)/configureLibssh2.node: TOOLSET := $(TOOLSET)
$(builddir)/configureLibssh2.node: $(obj).target/configureLibssh2.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/configureLibssh2.node
# Short alias for building this executable.
.PHONY: configureLibssh2.node
configureLibssh2.node: $(obj).target/configureLibssh2.node $(builddir)/configureLibssh2.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/configureLibssh2.node

